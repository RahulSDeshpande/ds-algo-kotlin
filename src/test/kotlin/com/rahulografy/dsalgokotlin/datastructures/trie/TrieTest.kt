package com.rahulografy.dsalgokotlin.datastructures.trie

import com.google.common.truth.Truth
import org.junit.Test

class TrieTest {

    // @Before public void setup() { }
    // @Before public void setup() { }
    @Test(expected = IllegalArgumentException::class)
    fun testBadTrieDelete1() {
        val t = Trie()
        t.insert("some string")
        t.delete("some string", 0)
    }

    @Test(expected = IllegalArgumentException::class)
    fun testBadTrieDelete2() {
        val t = Trie()
        t.insert("some string")
        t.delete("some string", -1)
    }

    @Test(expected = IllegalArgumentException::class)
    fun testBadTrieDelete3() {
        val t = Trie()
        t.insert("some string")
        t.delete("some string", -345)
    }

    @Test(expected = IllegalArgumentException::class)
    fun testBadTrieInsert() {
        Trie().insert(null)
    }

    @Test(expected = IllegalArgumentException::class)
    fun testBadTrieCount() {
        Trie().count(null)
    }

    @Test(expected = IllegalArgumentException::class)
    fun testBadTrieContains() {
        Trie().contains(null)
    }

    @Test
    fun testContains() {
        val t1 = Trie()

        // This implementation doesn't count the empty string as
        // a valid string to be inserted into the trie (although it
        // would be easy to account for)
        t1.insert("")
        Truth.assertThat(t1.contains("")).isFalse()
        t1.insert("")
        Truth.assertThat(t1.contains("")).isFalse()
        t1.insert("")
        Truth.assertThat(t1.contains("")).isFalse()
        val t2 = Trie()
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        Truth.assertThat(t2.contains("aaaaa")).isTrue()
        Truth.assertThat(t2.contains("aaaa")).isTrue()
        Truth.assertThat(t2.contains("aaa")).isTrue()
        Truth.assertThat(t2.contains("aa")).isTrue()
        Truth.assertThat(t2.contains("a")).isTrue()
        val t3 = Trie()
        t3.insert("AE")
        t3.insert("AE")
        t3.insert("AH")
        t3.insert("AH")
        t3.insert("AH7")
        t3.insert("A7")
        t3.insert("7")
        t3.insert("7")
        t3.insert("B")
        t3.insert("B")
        t3.insert("B")
        t3.insert("B")
        Truth.assertThat(t3.contains("A")).isTrue()
        Truth.assertThat(t3.contains("AH")).isTrue()
        Truth.assertThat(t3.contains("A7")).isTrue()
        Truth.assertThat(t3.contains("AE")).isTrue()
        Truth.assertThat(t3.contains("AH7")).isTrue()
        Truth.assertThat(t3.contains("7")).isTrue()
        Truth.assertThat(t3.contains("B")).isTrue()
        Truth.assertThat(t3.contains("Ar")).isFalse()
        Truth.assertThat(t3.contains("A8")).isFalse()
        Truth.assertThat(t3.contains("AH6")).isFalse()
        Truth.assertThat(t3.contains("C")).isFalse()
    }

    @Test
    fun testCount() {
        val t1 = Trie()

        // This implementation doesn't count the empty string as
        // a valid string to be inserted into the trie (although it
        // would be easy to account for)
        t1.insert("")
        Truth.assertThat(t1.count("")).isEqualTo(0)
        t1.insert("")
        Truth.assertThat(t1.count("")).isEqualTo(0)
        t1.insert("")
        Truth.assertThat(t1.count("")).isEqualTo(0)
        val t2 = Trie()
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        t2.insert("aaaaa")
        Truth.assertThat(t2.count("aaaaa")).isEqualTo(5)
        Truth.assertThat(t2.count("aaaa")).isEqualTo(5)
        Truth.assertThat(t2.count("aaa")).isEqualTo(5)
        Truth.assertThat(t2.count("aa")).isEqualTo(5)
        Truth.assertThat(t2.count("a")).isEqualTo(5)
        val t3 = Trie()
        t3.insert("AE")
        t3.insert("AE")
        t3.insert("AH")
        t3.insert("AH")
        t3.insert("AH7")
        t3.insert("A7")
        t3.insert("7")
        t3.insert("7")
        t3.insert("B")
        t3.insert("B")
        t3.insert("B")
        t3.insert("B")
        Truth.assertThat(t3.count("A")).isEqualTo(6)
        Truth.assertThat(t3.count("AH")).isEqualTo(3)
        Truth.assertThat(t3.count("A7")).isEqualTo(1)
        Truth.assertThat(t3.count("AE")).isEqualTo(2)
        Truth.assertThat(t3.count("AH7")).isEqualTo(1)
        Truth.assertThat(t3.count("7")).isEqualTo(2)
        Truth.assertThat(t3.count("B")).isEqualTo(4)
        Truth.assertThat(t3.count("Ar")).isEqualTo(0)
        Truth.assertThat(t3.count("A8")).isEqualTo(0)
        Truth.assertThat(t3.count("AH6")).isEqualTo(0)
        Truth.assertThat(t3.count("C")).isEqualTo(0)
    }

    @Test
    fun testInsert() {
        val t = Trie()
        Truth.assertThat(t.insert("a")).isFalse()
        Truth.assertThat(t.insert("b")).isFalse()
        Truth.assertThat(t.insert("c")).isFalse()
        Truth.assertThat(t.insert("d")).isFalse()
        Truth.assertThat(t.insert("x")).isFalse()
        Truth.assertThat(t.insert("ab")).isTrue()
        Truth.assertThat(t.insert("xkcd")).isTrue()
        Truth.assertThat(t.insert("dogs")).isTrue()
        Truth.assertThat(t.insert("bears")).isTrue()
        Truth.assertThat(t.insert("mo")).isFalse()
        Truth.assertThat(t.insert("mooooose")).isTrue()
        t.clear()
        Truth.assertThat(t.insert("aaaa", 4)).isFalse()
        Truth.assertThat(t.count("aaaa")).isEqualTo(4)
        Truth.assertThat(t.insert("aaa", 3)).isTrue()
        Truth.assertThat(t.count("a")).isEqualTo(7)
        Truth.assertThat(t.count("aa")).isEqualTo(7)
        Truth.assertThat(t.count("aaa")).isEqualTo(7)
        Truth.assertThat(t.count("aaaa")).isEqualTo(4)
        Truth.assertThat(t.count("aaaaa")).isEqualTo(0)
        Truth.assertThat(t.insert("a", 5)).isTrue()
        Truth.assertThat(t.count("a")).isEqualTo(12)
        Truth.assertThat(t.count("aa")).isEqualTo(7)
        Truth.assertThat(t.count("aaa")).isEqualTo(7)
        Truth.assertThat(t.count("aaaa")).isEqualTo(4)
        Truth.assertThat(t.count("aaaaa")).isEqualTo(0)
    }

    @Test
    fun testClear() {
        val t = Trie()
        Truth.assertThat(t.insert("a")).isFalse()
        Truth.assertThat(t.insert("b")).isFalse()
        Truth.assertThat(t.insert("c")).isFalse()
        Truth.assertThat(t.contains("a")).isTrue()
        Truth.assertThat(t.contains("b")).isTrue()
        Truth.assertThat(t.contains("c")).isTrue()
        t.clear()
        Truth.assertThat(t.contains("a")).isFalse()
        Truth.assertThat(t.contains("b")).isFalse()
        Truth.assertThat(t.contains("c")).isFalse()
        t.insert("aaaa")
        t.insert("aaab")
        t.insert("aaab5")
        t.insert("aaac")
        t.insert("aaacb")
        Truth.assertThat(t.contains("aaa")).isTrue()
        Truth.assertThat(t.contains("aaacb")).isTrue()
        Truth.assertThat(t.contains("aaab5")).isTrue()
        t.clear()
        Truth.assertThat(t.contains("aaaa")).isFalse()
        Truth.assertThat(t.contains("aaab")).isFalse()
        Truth.assertThat(t.contains("aaab5")).isFalse()
        Truth.assertThat(t.contains("aaac")).isFalse()
        Truth.assertThat(t.contains("aaacb")).isFalse()
    }

    @Test
    fun testDelete() {
        val t = Trie()
        t.insert("AAC")
        t.insert("AA")
        t.insert("A")
        Truth.assertThat(t.delete("AAC")).isTrue()
        Truth.assertThat(t.contains("AAC")).isFalse()
        Truth.assertThat(t.contains("AA")).isTrue()
        Truth.assertThat(t.contains("A")).isTrue()
        Truth.assertThat(t.delete("AA")).isTrue()
        Truth.assertThat(t.contains("AAC")).isFalse()
        Truth.assertThat(t.contains("AA")).isFalse()
        Truth.assertThat(t.contains("A")).isTrue()
        Truth.assertThat(t.delete("A")).isTrue()
        Truth.assertThat(t.contains("AAC")).isFalse()
        Truth.assertThat(t.contains("AA")).isFalse()
        Truth.assertThat(t.contains("A")).isFalse()
        t.clear()
        t.insert("AAC")
        t.insert("AA")
        t.insert("A")
        Truth.assertThat(t.delete("AA")).isTrue()
        Truth.assertThat(t.delete("AA")).isTrue()
        Truth.assertThat(t.contains("AAC")).isFalse()
        Truth.assertThat(t.contains("AA")).isFalse()
        Truth.assertThat(t.contains("A")).isTrue()
        t.clear()
        t.insert("\$A")
        t.insert("\$B")
        t.insert("\$C")
        Truth.assertThat(t.delete("$", 3)).isTrue()
        Truth.assertThat(t.delete("$")).isFalse()
        Truth.assertThat(t.contains("$")).isFalse()
        Truth.assertThat(t.contains("\$A")).isFalse()
        Truth.assertThat(t.contains("\$B")).isFalse()
        Truth.assertThat(t.contains("\$C")).isFalse()
        Truth.assertThat(t.delete("\$A")).isFalse()
        Truth.assertThat(t.delete("\$B")).isFalse()
        Truth.assertThat(t.delete("\$C")).isFalse()
        t.clear()
        t.insert("\$A")
        t.insert("\$B")
        t.insert("\$C")
        Truth.assertThat(t.delete("$", 2)).isTrue()
        Truth.assertThat(t.delete("$")).isTrue()
        Truth.assertThat(t.contains("$")).isFalse()
        Truth.assertThat(t.contains("\$A")).isFalse()
        Truth.assertThat(t.contains("\$B")).isFalse()
        Truth.assertThat(t.contains("\$C")).isFalse()
        Truth.assertThat(t.delete("\$A")).isFalse()
        Truth.assertThat(t.delete("\$B")).isFalse()
        Truth.assertThat(t.delete("\$C")).isFalse()
        t.clear()
        t.insert("\$A")
        t.insert("\$B")
        t.insert("\$C")
        Truth.assertThat(t.delete("$", 2)).isTrue()
        Truth.assertThat(t.contains("$")).isTrue()
        Truth.assertThat(t.contains("\$A")).isTrue()
        Truth.assertThat(t.contains("\$B")).isTrue()
        Truth.assertThat(t.contains("\$C")).isTrue()
        Truth.assertThat(t.delete("\$A")).isTrue()
        Truth.assertThat(t.delete("\$B")).isFalse()
        Truth.assertThat(t.delete("\$C")).isFalse()
        t.clear()
        t.insert("CAT", 3)
        t.insert("DOG", 3)
        Truth.assertThat(t.delete("parrot", 50)).isFalse()
        t.clear()
        t.insert("1234")
        t.insert("122", 2)
        t.insert("123", 3)
        Truth.assertThat(t.delete("12", 6)).isTrue()
        Truth.assertThat(t.delete("12")).isFalse()
        Truth.assertThat(t.delete("1")).isFalse()
        Truth.assertThat(t.contains("1234")).isFalse()
        Truth.assertThat(t.contains("123")).isFalse()
        Truth.assertThat(t.contains("12")).isFalse()
        Truth.assertThat(t.contains("1")).isFalse()
        t.clear()
        t.insert("1234")
        t.insert("122", 2)
        t.insert("123", 3)
        t.delete("12", 999999)
        Truth.assertThat(t.contains("1234")).isFalse()
        Truth.assertThat(t.contains("123")).isFalse()
        Truth.assertThat(t.contains("12")).isFalse()
        Truth.assertThat(t.contains("1")).isFalse()
        t.clear()
        t.insert("1234")
        t.insert("122", 2)
        t.insert("123", 3)
        t.delete("12", 999999)
        Truth.assertThat(t.contains("1234")).isFalse()
        Truth.assertThat(t.contains("123")).isFalse()
        Truth.assertThat(t.contains("12")).isFalse()
        Truth.assertThat(t.contains("1")).isFalse()
        t.clear()
        t.insert("1234")
        t.insert("122", 2)
        t.insert("123", 3)
        Truth.assertThat(t.delete("1234")).isTrue()
        Truth.assertThat(t.delete("123", 4)).isTrue()
        Truth.assertThat(t.delete("122", 2)).isTrue()
        Truth.assertThat(t.contains("1")).isFalse()
        Truth.assertThat(t.contains("12")).isFalse()
        Truth.assertThat(t.contains("122")).isFalse()
        Truth.assertThat(t.contains("123")).isFalse()
        Truth.assertThat(t.contains("1234")).isFalse()
    }

    @Test
    fun testEdgeCases() {
        val t = Trie()
        Truth.assertThat(t.count("")).isEqualTo(0)
        Truth.assertThat(t.count("\u0000")).isEqualTo(0)
        Truth.assertThat(t.count("\u0000\u0000")).isEqualTo(0)
        Truth.assertThat(t.count("\u0000\u0000\u0000")).isEqualTo(0)
        for (c in 0..127) Truth.assertThat(t.count("" + c)).isEqualTo(0)
        Truth.assertThat(t.contains("")).isFalse()
        Truth.assertThat(t.contains("\u0000")).isFalse()
        Truth.assertThat(t.contains("\u0000\u0000")).isFalse()
        Truth.assertThat(t.contains("\u0000\u0000\u0000")).isFalse()
        for (c in 0..127) Truth.assertThat(t.contains("" + c)).isFalse()
    }
}
